{
	"Simple Job":{
		"prefix":["snip","snip-yaml-job-simple"],
		"description":"Create a simple yaml job snippet",
		"body":[
			"<job name>:",
			"  stage: <stage>",
			"  image: node",
			"  script:",
			"    - npm install #install everything in package.json",
			"    - npm install -g <package-name>",
			"  artifacts:",
			"    paths:",
			"      - ./<publish folder path>"
		]
	},
	"Dynamic environment with teardown":{
		"prefix":["snip","snip-yaml-dynamic"],
		"description":"Create a yaml job snippet for dynamic environment + a teardown job that is called on environment shutdown",
		"body":[
			"deploy merge request to new dynamic environment review:",
			"  stage: deploy review",
			"  environment: ",
			"    name: review/$CI_COMMIT_REF_NAME",
			"    url: http://$CI_ENVIRONMENT_SLUG.host.com #will dynamically spin up this new dynamic environment on \"*.host.com\"",
			"    on_stop: trash review #run the \"trash review\" job OnStop of environment",
			"  only:",
			"    - merge_requests #only perform this job for merge requests",
			"  image: node",
			"  script: ",
			"    - npm install <dependencies>",
			"    - <deploy scrip> $CI_ENVIRONMENT_SLUG.host.com #this will be whichever script is needed to deploy to your testing environment",
			"",
			"trash review:",
			"  stage: deploy review",
			"  variables:",
			"    GIT_STRATEGY: none #prevent this from being run unless we call it explicitly",
			"  environment: ",
			"    name: review/$CI_COMMIT_REF_NAME",
			"    url: http://$CI_ENVIRONMENT_SLUG.host.com #will dynamically spin up this new dynamic environment",
			"    action: stop",
			"  only:",
			"    - merge_requests #only perform this job for merge requests",
			"  script:",
			"    # the following scripts will change depending on which hosting infrastructure is used. The scripts show are specific to surge.", 
			"    # Tearing down/destroying dynamic environments will be unique to each tech stack",
			"    - npm install --global surge",
			"    - surge teardown mavusi-$CI_ENVIRONMENT_SLUG.surge.sh"
		]
	},
	"Docker Compose 3.x sample":{
		"prefix":["snip","snip-docker-compose"],
		"description":"Official docker compose 3.x sample",
		"body":[
			"version: \"3.7\"",
			"services:",
			"",
			"  redis:",
			"    image: redis:alpine",
			"    ports:",
			"      - \"6379\"",
			"    networks:",
			"      - frontend",
			"    deploy:",
			"      replicas: 2",
			"      update_config:",
			"        parallelism: 2",
			"        delay: 10s",
			"      restart_policy:",
			"        condition: on-failure",
			"",
			"  db:",
			"    image: postgres:9.4",
			"    volumes:",
			"      - db-data:/var/lib/postgresql/data",
			"    networks:",
			"      - backend",
			"    deploy:",
			"      placement:",
			"        constraints: [node.role == manager]",
			"",
			"  vote:",
			"    image: dockersamples/examplevotingapp_vote:before",
			"    ports:",
			"      - \"5000:80\"",
			"    networks:",
			"      - frontend",
			"    depends_on:",
			"      - redis",
			"    deploy:",
			"      replicas: 2",
			"      update_config:",
			"        parallelism: 2",
			"      restart_policy:",
			"        condition: on-failure",
			"",
			"  result:",
			"    image: dockersamples/examplevotingapp_result:before",
			"    ports:",
			"      - \"5001:80\"",
			"    networks:",
			"      - backend",
			"    depends_on:",
			"      - db",
			"    deploy:",
			"      replicas: 1",
			"      update_config:",
			"        parallelism: 2",
			"        delay: 10s",
			"      restart_policy:",
			"        condition: on-failure",
			"",
			"  worker:",
			"    image: dockersamples/examplevotingapp_worker",
			"    networks:",
			"      - frontend",
			"      - backend",
			"    deploy:",
			"      mode: replicated",
			"      replicas: 1",
			"      labels: [APP=VOTING]",
			"      restart_policy:",
			"        condition: on-failure",
			"        delay: 10s",
			"        max_attempts: 3",
			"        window: 120s",
			"      placement:",
			"        constraints: [node.role == manager]",
			"",
			"  visualizer:",
			"    image: dockersamples/visualizer:stable",
			"    ports:",
			"      - \"8080:8080\"",
			"    stop_grace_period: 1m30s",
			"    volumes:",
			"      - \"/var/run/docker.sock:/var/run/docker.sock\"",
			"    deploy:",
			"      placement:",
			"        constraints: [node.role == manager]",
			"",
			"networks:",
			"  frontend:",
			"  backend:",
			"",
			"volumes:",
			"  db-data:"
		]
	},
	"Name":{
		"prefix":["snip","snip-kubernetes-pod-definition"],
		"description":"Sample Kubernetes Pod Definition file",
		"body":[
			"apiVersion: v1",
			"kind: Pod",
			"metadata:",
			"  name: $1-pod",
			"  labels:",
			"    app: myapp",
			"    type: front-end",
			"spec:",
			"  containers:",
			"  - name: $1-container",
			"    image: nginx",
			"    env:",
            "    - name: PASSWORD",
            "      value: mysecretpassword",
			"  - name: my-second-container-name",
			"    image: mysql"
		]
	},
	"Kubernetes Replica Set definition":{
		"prefix":["snip","snip-kubernetes-replicaset"],
		"description":"Kubernetes ReplicaSet starter",
		"body":[
			"apiVersion: apps/v1",
			"kind: ReplicaSet",
			"",
			"metadata:",
			"  name: $1-replicaset",
			"  labels:",
			"      app: $1",
			"      type: front-end",
			"",
			"spec:",
			"  template:",
			"",
			"    metadata:",
			"      name: $1-pod",
			"      labels:",
			"        app: $1",
			"        type: front-end",
			"    spec:",
			"      containers:",
			"#list your docker containers here",
			"      - name: container1",
			"        image: nginx",
			"      - name: container2",
			"        image: node",
			"#set min. number of replicas",
			"  replicas: 2",
			"  selector: ",
			"    matchLabels:",
			"        app: $1",
			"        type: front-end",
			"",
			"# It is suggested that you name this file '$1-replicaset.yml' ",
			"# kubectl create -f $1-replicaset.yml",
			"# kubectl replace -f $1-replicaset.yml <-- replaces an existing replicaset definition",
			"# kubectl get replicaset",
			"# kubectl get pods"
		]
	},
	"Kubernetes Deployment Definition":{
		"prefix":["snip","snip-kubernetes-deployment"],
		"description":"Creates a sample Kubernetes deployment definition file",
		"body":[
			"apiVersion: apps/v1",
			"kind: Deployment",
			"",
			"metadata:",
			"  name: $1-deployment",
			"  labels:",
			"      app: $1",
			"      type: front-end",
			"",
			"spec:",
			"  template:",
			"    ",
			"    metadata:",
			"      name: $1-pod",
			"      labels:",
			"        app: $1",
			"        type: front-end",
			"    spec:",
			"      containers:",
			"      - name: container1",
			"        image: nginx",
			"      - name: container2",
			"        image: node",
			"    ",
			"  replicas: 3",
			"  selector: ",
			"    matchLabels:",
			"        app: $1",
			"        type: front-end",
			"        ",
			"# kubectl create -f $1-deployment-definition.yml",
			"# kubectl replace -f $1-deployment-definition.yml <-- replaces an existing deployment definition",
			"# kubectl apply -f $1-deployment-definition.yml <-- recreate/update deployment. E.g. when performing a scheduled deployment",
			"# kubectl rollout undo deployment/$1-deployment <-- rolls back an update",
			"# kubectl get deployments",
			"# kubectl get replicaset",
			"# kubectl get pods",
			"# or simply",
			"# kubectrl get all"
		]
	},
	"Kubernetes NodePort Definition":{
		"prefix":["snip","snip-kubernetes-nodeport"],
		"description":"NodePort definition file",
		"body":[
			"apiVersion: v1",
			"kind: Service",
			"",
			"metadata:",
			"  name: $1-NodePort-Service",
			"  labels:",
			"      app: $1",
			"      type: front-end",
			"",
			"spec:",
			"  type: NodePort",
			"  ports:",
			"    - targetPort: 80",
			"      port: 80",
			"      nodePort: 30001",
			"  selector:",
			"    app: $1",
			"    type: front-end",
			"# kubectl create -f $1-NodePort-Service.yml",
			"# kubectl replace -f $1-NodePort-Service.yml <-- replaces an existing Service defition",
			"# kubectl apply -f $1-NodePort-Service.yml",
			"# kubectl get services"
		]
	},
	"Kubernetes ClusterIP Definition":{
		"prefix":["snip","snip-kubernetes-clusterip"],
		"description":"ClusterIP Definition File",
		"body":[
			"apiVersion: v1",
			"kind: Service",
			"",
			"metadata:",
			"  name: $1-ClusterIP-Service",
			"  labels:",
			"      app: $1-ClusterIP-Service",
			"      type: front-end",
			"",
			"spec:",
			"  type: ClusterIP",
			"  ports:",
			"    - targetPort: 80",
			"      port: 80",
			"",
			"  selector:",
			"    app: $1-ClusterIP-Service",
			"    type: front-end",
			"# kubectl create -f $1-ClusterIP-Service.yml",
			"# kubectl replace -f $1-ClusterIP-Service.yml <-- replaces an existing Service defition",
			"# kubectl apply -f $1-ClusterIP-Service.yml",
			"# kubectl get services"
		]
	}
}