{
	
	"SQL Server Integrated Security":{
		"prefix":["snip","snip-sql-integrated"],
		"description":"SQL Server connection string with integrated security",
		"body":["\"Data Source=$1;Initial Catalog=$2;Integrated Security=True\""]
	},
	"SQL Server Multiple Active Result Sets":{
		"prefix":["snip","snip-sql-mars"],
		"description": "SQL Server connection string with Multiple Active Result Sets",
		"body":["Server=$1;Database=$2;Trusted_Connection=True;MultipleActiveResultSets=true;"]
	},
	"SQL Server Multiple Active Result Sets with credentials":{
		"prefix":["snip","snip-sql-mars-creds"],
		"description": "SQL Server connection string with Multiple Active Result Sets",
		"body":["Server=$1;Database=$2;User Id=$3;Password=$4;MultipleActiveResultSets=true;"]
	},
	
	
	

	"Api Controller": {
		"prefix": ["snip", "snip-api"],
		"body": [
			"using Microsoft.AspNetCore.Mvc;",
			"using Microsoft.Extensions.Logging;",
			"",
			"[Route(\"api\")]",
			"[ApiController]",
			"public class $1Controller : ControllerBase",
			"{",
			"    private readonly ILogger<$1Controller> _logger;",
			"    public $1Controller(ILogger<$1Controller> logger)",
			"    {",
			"        _logger = logger;",
			"    }",
			"}"],
		"description": "Api Controller"
	  },
	  "EF DbContext": {
		"prefix": ["snip", "snip-ef"],
		"body": [
		"using Microsoft.EntityFrameworkCore;",
		"",
		"public class $1Context : DbContext",
		"{",
		"    #region Powershell EF Migration Commands",
		"    /*",
		"    dotnet ef dbcontext scaffold \"<connectionstring>\" Microsoft.EntityFrameworkCore.SqlServer -o <foldername>",
		"    dotnet ef migrations add <MigrationName>",
		"    dotnet ef migrations remove",
		"    dotnet ef database update",
		"    dotnet ef database update <RollBackToThisMigration>",
		"    */",
		"    #endregion",
		"    #region EF nuget install commands",
		"    /*",
		"    dotnet add package Microsoft.EntityFrameworkCore",
		"    dotnet add package Microsoft.EntityFrameworkCore.Tools",
		"    dotnet add package Microsoft.EntityFrameworkCore.Tools.Dotnet",
		"    dotnet add package Microsoft.EntityFrameworkCore.Design",
		"    dotnet add package Microsoft.EntityFrameworkCore.SqlServer",
		"    */",
		"    //add the following to *.csproj",
        "    /*",
        "    <ItemGroup>",
        "        <DotNetCliToolReference", 
        "            Include=\"Microsoft.EntityFrameworkCore.Tools.Dotnet\"", 
        "            Version=\"2.0.3\" />",
        "    </ItemGroup>",
        "    */",
		"    #endregion",
        "    public DbSet<$1> $1s { get; set; }",
		"",		
		"    public $1Context(){}",
		"    public $1Context(DbContextOptions<$1Context> options):base(options){}",
		"    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)",
		"    {",
		"        //optionsBuilder.UseSqlServer(@\"Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=TestDb;\");",
		"    }",
		"",
		"    protected override void OnModelCreating(ModelBuilder modelBuilder)",
		"    {",
		"        //modelBuilder.Entity<$1>().HasIndex(x => x.AgregateRootId);",
		"    }",
		"}"],
		"description": "Api Controller"
	  },
	  "EF Core Startup.cs Service Configuration":{
		  "prefix":["snip","snip-ef-startup-config"],
		  "description":"Sample config settings for Startup.ConfigureServices()",
		  "body":[
			"var configurationSection = Configuration.GetSection(\"ConnectionStrings:DefaultConnection\");",
            "services.AddDbContext<DataBaseContext>(options => options.UseSqlServer(configurationSection.Value));"
		  ]
	  },
	  "EF Core in-memory mock sample unit test":{
		  "prefix":["snip","snip-ef-mock-config"],
		  "description":"Generates a sample unit test with in-memory mock database config and sample test.",
		  "body":[
			"public void GetAllTest()",
			"{",
			"    //Requires the package Microsoft.EntityFrameworkCore.InMemory",
			"        var options = new DbContextOptionsBuilder<MyDbContext>()",
			"            .UseInMemoryDatabase(databaseName: \"MyDatabase\")",
			"            .Options;",
			"",
			"        // Insert seed data into the database using one instance of the context",
			"        using (var context = new MyDbContext(options))",
			"        {",
			"            context.Movies.Add(new Movie {Id = 1, Title = \"Movie 1\", YearOfRelease = 2018, Genre = \"Action\"});",
			"            context.Movies.Add(new Movie {Id = 2, Title = \"Movie 2\", YearOfRelease = 2018, Genre = \"Action\"});",
			"            context.Movies.Add(nnew Movie {Id = 3, Title = \"Movie 3\", YearOfRelease = 2019, Genre = \"Action\"});",
			"            context.SaveChanges();",
			"        }",
			"",
			"        // Use a clean instance of the context to run the test",
			"        using (var context = new MyDbContext(options))",
			"        {",
			"            MyRepository myRepository = new MyRepository(context);",
			"            List<Movies> movies == myRepository.GetAll()",
			"",
			"            Assert.Equal(3, movies.Count);",
			"        }",
			"}"
		  ]
	  },
	  "Json Api Generic Client Base":
	  {
		  "prefix" : ["snip", "snip-api-client"],
		  "body" :[
			"using Newtonsoft.Json;",
			"using System;",
			"using System.Collections.Generic;",
			"using System.Net.Http;",
			"using System.Net.Http.Headers;",
			"using System.Text;",
			"using System.Threading.Tasks;",
			"",
			"public class JsonApiClientBase",
			"{",
			"    protected static Dictionary<string,HttpClient> clients = new Dictionary<string, HttpClient>();",
			"    private static string _token;",
			"    public JsonApiClientBase(string baseUrl, string token=\"\")",
			"    {",
			"        _token = token;",
			"",
			"        if (!clients.ContainsKey(baseUrl))",
			"        {",
			"            var client = InitializeClient(baseUrl);",
			"            if (!string.IsNullOrEmpty(_token))",
			"            {",
			"                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", $\"{_token}\");",
			"            }",
			"            clients.Add(baseUrl, client);",
			"        }",
			"        else",
			"        {",
			"            var client = clients[baseUrl];",
			"            if (!string.IsNullOrEmpty(_token))",
			"            {",
			"                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", $\"{_token}\");",
			"            }",
			"        }",
			"    }",
			"",
			"    private static HttpClient InitializeClient(string baseUrl)",
			"    {",
			"        var client = new HttpClient()",
			"        {",
			"            BaseAddress = new Uri(baseUrl)",
			"        };",
			"       ",
			"        return client;",
			"    }",
			"",
			"    protected async Task<T> Get<T>(HttpClient client, string Uri) where T : new()",
			"    {",
			"        var resp = await client.GetAsync(Uri);",
			"        var res = await resp.Content.ReadAsStringAsync();",
			"        var ret = JsonConvert.DeserializeObject<T>(res);",
			"        return ret;",
			"    }",
			"",
			"    protected async Task Post<T>(HttpClient client, string Uri, T model) where T : new()",
			"    {",
			"        await client.PostAsync(Uri, new StringContent(JsonConvert.SerializeObject(model), Encoding.UTF8, \"application/json\"));",
			"    }",
			"",
			"    protected async Task Put<T>(HttpClient client, string Uri, T model) where T : new()",
			"    {",
			"        await client.PutAsync(Uri, new StringContent(JsonConvert.SerializeObject(model), Encoding.UTF8, \"application/json\"));",
			"    }",
			"",
			"    protected async Task Delete(HttpClient client, string Uri)",
			"    {",
			"        await client.DeleteAsync(Uri);",
			"    }",
			"}"
		  ]
	  }
}