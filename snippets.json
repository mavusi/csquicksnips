{
	
	"SQL Server Integrated Security":{
		"prefix":["snip","snip-sql-integrated"],
		"description":"SQL Server connection string with integrated security",
		"body":["\"Data Source=$1;Initial Catalog=$2;Integrated Security=True\""]
	},
	"SQL Server Multiple Active Result Sets":{
		"prefix":["snip","snip-sql-mars"],
		"description": "SQL Server connection string with Multiple Active Result Sets",
		"body":["Server=$1;Database=$2;Trusted_Connection=True;MultipleActiveResultSets=true;"]
	},
	"SQL Server Multiple Active Result Sets with credentials":{
		"prefix":["snip","snip-sql-mars-creds"],
		"description": "SQL Server connection string with Multiple Active Result Sets",
		"body":["Server=$1;Database=$2;User Id=$3;Password=$4;MultipleActiveResultSets=true;"]
	},
	
	
	"Generic Repository Interface":
	{
		"prefix":["snip","snip-generic-irepository"],
		"description": "Generic Repository Interface",
		"body":["using System.Collections.Generic;",
			"",
			"public interface IGenericRepository<T> where T : class",
			"{",
			"    IEnumerable<T> GetAll();",
			"    T GetById(object id);",
			"    void Insert(T obj);",
			"    void Update(T obj);",
			"    void Delete(object id);",
			"    void Save();",
			"}"]
	},
	"Generic Repository Interface Implementation":
	{
		"prefix":["snip","snip-generic-repository"],
		"description": "Implements your Generic Repository Interface",
		"body":["using System.Collections.Generic;",
			"",
			"public class GenericRepository<T> : IGenericRepository<T> where T : class",
			"{",
			"    private DBContext _context = null;",
			"    private DbSet<T> table = null;",
			"    public GenericRepository()",
			"    {",
			"        this._context = new DBContext();",
			"        table = _context.Set<T>();",
			"    }",
			"    public GenericRepository(DBContext _context)",
			"    {",
			"        this._context = _context;",
			"        table = _context.Set<T>();",
			"    }",
			"    public IEnumerable<T> GetAll()",
			"    {",
			"        return table.ToList();",
			"    }",
			"    public T GetById(object id)",
			"    {",
			"        return table.Find(id);",
			"    }",
			"    public void Insert(T obj)",
			"    {",
			"        table.Add(obj);",
			"    }",
			"    public void Update(T obj)",
			"    {",
			"        table.Attach(obj);",
			"        _context.Entry(obj).State = EntityState.Modified;",
			"    }",
			"    public void Delete(object id)",
			"    {",
			"        T existing = table.Find(id);",
			"        table.Remove(existing);",
			"    }",
			"    public void Save()",
			"    {",
			"        _context.SaveChanges();",
			"    }",
			"}"]
	},

	"Api Controller": {
		"prefix": ["snip", "snip-api"],
		"body": ["[Route(\"api\")]",
			"[ApiController]",
			"public class $1Controller : ControllerBase",
			"{",
			"    private readonly ILogger<$1Controller> _logger;",
			"    public $1Controller(ILogger<$1Controller> logger)",
			"    {",
			"        _logger = logger;",
			"    }",
			"}"],
		"description": "Api Controller"
	  },
	  "EF DbContext": {
		"prefix": ["snip", "snip-ef"],
		"body": [
		"public class $1Context : DbContext",
		"{",
		"    #region Powershell EF Migration Commands",
		"    /*",
		"    dotnet ef dbcontext scaffold \"<connectionstring>\" Microsoft.EntityFrameworkCore.SqlServer -o <foldername>",
		"    dotnet ef migrations add <MigrationName>",
		"    dotnet ef migrations remove",
		"    dotnet ef database update",
		"    dotnet ef database update <RollBackToThisMigration>",
		"    */",
		"#endregion",
        "    public DbSet<$1> $1s { get; set; }",
	    "",		
		"    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)",
		"    {",
		"        optionsBuilder.UseSqlServer(@\"Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=TestDb;\");",
		"    }",
		"",
		"    protected override void OnModelCreating(ModelBuilder modelBuilder)",
		"    {",
		"        //modelBuilder.Entity<$1>().HasIndex(x => x.AgregateRootId);",
		"    }",
		"}"],
		"description": "Api Controller"
	  },
	  "Json Api Generic Client Base":
	  {
		  "prefix" : ["snip", "snip-api-client"],
		  "body" :[
			"using Newtonsoft.Json;",
			"using System;",
			"using System.Net.Http;",
			"using System.Net.Http.Headers;",
			"using System.Text;",
			"using System.Threading.Tasks;",
			"",
			"public class JsonApiClientBase",
			"{",
			"    private static readonly HttpClient client = InitializeClient();",
			"    public JsonApiClientBase()",
			"    {",
			"        ",
			"    }",
			"",
			"    private static HttpClient InitializeClient()",
			"    {",
			"        var c = new HttpClient()",
			"        {",
			"            BaseAddress = new Uri(\"{Url}\")",
			"        };",
			"        //uncomment the following line if the API requires authentication",
			"        //client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Token\", \"{Token}\");",
			"        return c;",
			"    }",
			"",
			"    protected async Task<T> Get<T>(string Uri) where T : new()",
			"    {",
			"        var resp = await client.GetAsync(Uri);",
			"        var res = await resp.Content.ReadAsStringAsync();",
			"        var ret = JsonConvert.DeserializeObject<T>(res);",
			"        return ret;",
			"    }",
			"",
			"    protected async Task Post<T>(string Uri, T model) where T : new()",
			"    {",
			"        await client.PostAsync(Uri, new StringContent(JsonConvert.SerializeObject(model), Encoding.UTF8, \"application/json\"));",
			"    }",
			"",
			"    protected async Task Put<T>(string Uri, T model) where T : new()",
			"    {",
			"        await client.PutAsync(Uri, new StringContent(JsonConvert.SerializeObject(model), Encoding.UTF8, \"application/json\"));",
			"    }",
			"",
			"    protected async Task Delete(string Uri)",
			"    {",
			"        await client.DeleteAsync(Uri);",
			"    }",
			"}"
		  ]
	  }
}